A. Umum :
1. Factory Function : pola dalam pemrograman JavaScript yang digunakan untuk membuat dan menginisialisasi objek. 
------------------------------------------------------------------
2. Berbeda dengan constructor function yang menggunakan keyword `new`, factory function adalah fungsi biasa yang mengembalikan objek baru setiap kali dipanggil.
------------------------------------------------------------------



B. Mengapa menggunakan factory function :
1. Kesederhanaan : Tidak perlu menggunakan kata kunci `new`, yang sering kali membingungkan, terutama bagi pemula.
------------------------------------------------------------------
2. Fleksibilitas : Kamu dapat menggunakan logika kompleks di dalam factory tanpa mengubah cara objek dibuat.
------------------------------------------------------------------
3. Menghindari masalah `this` : Pada constructor function, kamu sering harus berhati-hati dengan konteks this. Pada factory function, masalah ini tidak ada karena kamu mengelola semuanya secara eksplisit.
------------------------------------------------------------------



C. Contoh dasar factory function :
1. Bagaimana Factory Function Bekerja :
Factory function : fungsi yang membuat dan mmengembalikan objek. Objek ini bisa berupa objek baru yang kosong atau bisa berisi beberapa properti dan metode sesuai kebutuhan.
------------------------------------------------------------------
2. Contoh : 
function createCar(make, model, year) {
  return {
    make: make,
    model: model,
    year: year,
    getCarInfo() {
      return `${this.make} ${this.model} (${this.year})`;
    }
  };
}

const car1 = createCar("Toyota", "Camry", 2021);
console.log(car1.getCarInfo()); // Output: "Toyota Camry (2021)"
------------------------------------------------------------------
//Penjelasan :
* Di sini, `createCar` : Factory function yang membaut objek mobil (`car`) dengan properti `make`, `model`, dan `year`. Fungsi ini juga menambahkan metode `getCarInfo` untuk mendapatkan informasi mobil.
------------------------------------------------------------------



C. Keuntungan Facctory function : 
1. Tidak perlu `new` : 
* Kamu tidak perlu menggunakan kata kunci `new`, yang membuat kode lebih aman dan mudah dipahami. 
* Misalnya, jika kamu lupa menggunakan `new` pada constructor function, `this` tidak akan merujuk kke objek yang diharapkan, tetapi pada `window` (dalam mode non-stricte).
------------------------------------------------------------------
2. Enkapsulasi dan privasi :
* Factory function memungkinkan untukn menyembukian data di dalamnya, sehingga hanya metode yang diekspos yang dapat mengakses data tersebut.
------------------------------------------------------------------
3. Kustomisasi yang mudah :
* Kamu daoat menambahkan logika untuk memeriksa nilai, memberikan nilai default, atau bahkan membuat objek yang berbeda berdasarkan kondisi tertentu.
------------------------------------------------------------------



D. Contoh Enkapsulais demgam Factory Function :
1. Contoh :
function createCounter() {
  let count = 0; // Variabel privat

  return {
    increment() {
      count++;
      return count;
    },
    decrement() {
      count--;
      return count;
    },
    getCount() {
      return count;
    }
  };
}

const counter = createCounter();
console.log(counter.increment()); // Output: 1
console.log(counter.getCount()); // Output: 1
------------------------------------------------------------------
* Dalam contoh ini, variabel `count` : privat dan tidak dapat diakses dari luar objek yang dikembalikan. 
* Ini memberikan kontrol penuh atas bagiamana nilai `count` dimodifikasi, menjaga integritas data. 
------------------------------------------------------------------



E. Perbandingan dengan Constructor function :
1. Factory function menawarkan keuntungan tertentu dibandingkan constructor function, terutama dalam hal kesederhanaan dan fleksibilitas. 
------------------------------------------------------------------
2. Misalnya, jika kamu menggunakan constructor function dan lupa menggunakan `new`, hasilnya bisa tidak terduga. 
------------------------------------------------------------------
3. Namun, dengan factory function, kamu hanya perlu memanggil fungsi , dan objek yang benar akan selalu dikembalikan.
------------------------------------------------------------------



F. Kapan menggunakan Factory Function :
1. Menghindari `this` dan `new` : Saat kamu ingin menghindari kompleksitas penggunana `this` atau menghindari potensi kesalahan menggunakan `new`.
------------------------------------------------------------------
2. Engkapsulasi : Ketika kamu ingin menjaga variabel privat dan hanya mengekspos metode tertentu.
------------------------------------------------------------------
3. Fleksibilitas : Saat kamu perlu menambahkan logika kompleks ke dalam pembuatan objek tanpa terikat pada sintaks khusus.
------------------------------------------------------------------



G. Kesimpulan :
1. Factory function : cara yang kuat dan fleksibel untuk membuat objek di JavaScript. Dengan menggunakan factory Function, kamu dapat membuat objek yang terstruktur dengan baik, memanfaatkan enkapsulasi, dan menghindari masalah umum yang terkait dengan this dan new. 
2. Ini adalah pendekatan yang sangat berguna untuk membuat kode yang lebih bersih, mudah dibaca, dan lebih mudah di-debug.
















