A . Fatory Function menggunakan `this` :
1. Factory function yang menggunakan `this` lebih mirip dengan constructor function. 
---------------------------------------------------------------
2. Ini masih bekerja, tetapi ada beberapa kerumitan tambahan karena `this` merujuk ke objek yang sedang dibuat, dan ini memerlukan pemahaman lebih lanjut tentang konteks `this`.
---------------------------------------------------------------
3. Contoh dasar :
function createColor (r,g,b) {
  const color = {};
  color.r = r;
  color.g = g;
  color.b = b;
  color.rgb = function() {
    return `rgb(${this.r}, ${this.g},${this,b})`; //menggunakan `this`.
  };
  color.hex = function () {
    return `#` + ((1 << 24) + (this.r << 16) + (this.g << 8) + this.b).toString(16).slice(1); // Menggunakan `this`
  };
return color;
}

const color1 = createColor(255, 100, 50);
console.log(color1.rgb()); // Output: rgb(255,100,50)
console.log(color1.hex()); // Output: #ff6432
---------------------------------------------------------------
1. Kelebihan this :
* menggunakan `this` untuk merujuk ke objek : Jika kamu terbiasa dengan konsep `this`, ini bisa menjadi cara yang berguna untuk mengakses properti objek.
---------------------------------------------------------------
2. Kekurangan this : 
* Lebih rumit: Menggunakan this bisa menjadi kompleks, terutama ketika bekerja dengan konteks yang berbeda di dalam metode.
* Potensi masalah jika digunakan secara tidak tepat: this bisa merujuk ke objek yang berbeda tergantung pada bagaimana fungsi dipanggil, yang dapat menyebabkan bug.
---------------------------------------------------------------



B. Factory Function tanpa `this` :
1. Factory function yang tidak menggunakan this lebih sederhana dan eksplisit. Kita langsung mengakses nilai dari parameter atau variabel lokal di dalam fungsi. 
2. Ini lebih aman dan lebih mudah dipahami, terutama bagi pemula.
---------------------------------------------------------------
3. Contoh :
function createColor(r, g, b) {
  return {
    r: r,
    g: g,
    b: b,
    rgb() {
      return `rgb(${r},${g},${b})`; // Menggunakan parameter langsung
    },
    hex() {
      return `#` + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1); // Menggunakan parameter langsung
    }
  };
}

const color2 = createColor(255, 100, 50);
console.log(color2.rgb()); // Output: rgb(255,100,50)
console.log(color2.hex()); // Output: #ff6432
---------------------------------------------------------------
1. Kelebihan : 
* Lebih sederhana: Tidak ada penggunaan this, sehingga kode lebih mudah dipahami dan di-debug.
* Lebih aman: Tidak ada risiko this merujuk ke objek yang salah atau konteks yang berbeda.
---------------------------------------------------------------
2. Kekurangan :
* Kurang fleksibel untuk beberapa kasus: Jika kamu perlu mengubah properti objek secara dinamis atau menambah metode lebih kompleks, this mungkin diperlukan.
---------------------------------------------------------------


C. Ringkasan Perbedaan :
1. Aspek Kesederhanaan :
a. : Menggunakan `this` : Lebih rumit
b. : Tanpa `this` : Lebih sederhana dan mudah dipahami
---------------------------------------------------------------
2.Penggunaan `this` :
a. : Menggunakan `this` : Ya, digunakan untuk merujuk ke objek saat ini
b. : Tanpa `this` : Tidak ada penggunaan this, menggunakan variabel langsung
---------------------------------------------------------------
3. Potensi Masalah : 
a. : Menggunakan `this` : Bisa menyebabkan bug jika this merujuk ke konteks yang salah
b. : Tanpa `this` : Lebih aman karena tidak ada this
---------------------------------------------------------------
4. Kesesuaian dengan Pemula :
a. : Menggunakan `this` : Mungkin membingungkan bagi pemula
b. : Tanpa `this` : Lebih cocok untuk pemula
---------------------------------------------------------------
4. Fleksibilitas :
a. : Menggunakan `this` : Lebih fleksibel dalam beberapa kasus
b. : Tanpa `this` : Kurang fleksibel jika memerlukan manipulasi objek lebih lanjut
---------------------------------------------------------------




D. Kapan Menggunakan Masing-Masing :
1. Menggunakan this: Jika kamu membutuhkan cara yang lebih fleksibel untuk mengakses atau memodifikasi properti objek dalam berbagai metode.
---------------------------------------------------------------
2. Tanpa this: Jika kamu ingin membuat kode yang lebih sederhana, lebih aman, dan lebih mudah dipahami, terutama untuk skenario yang tidak memerlukan akses dinamis ke properti objek.
---------------------------------------------------------------







